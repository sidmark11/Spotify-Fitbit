{"ast":null,"code":"var _jsxFileName = \"/Users/sidmarkurthi/Documents/fitbit_spotify/client/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Navbar from \"./components/Navbar.js\";\nimport LoginPage from './components/pages/LoginPage.js';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [fitbit_access_token, set_fitbit_access_token] = useState(\"empty\");\n  const [spotify_access_token, set_spotify_access_token] = useState(\"empty\");\n\n  // will need to add a dependency such that this is only triggered when spotify auth is initiated\n  // or else we'll mix up the fitbit and spotify authentication processes\n  // now we have a conditional that only triggers if we're at the spotify login\n  useEffect(() => {\n    // window.location.hash gives everything in the URL after the # (which is the access token in our case)\n    if (window.location.pathname === '/fitbitlogin') {\n      if (window.location.hash) {\n        let hash = window.location.hash;\n        let token = hash.split('=')[1].split('&')[0];\n        localStorage.setItem('fitbit_access_token', token);\n        set_fitbit_access_token(token);\n        console.log(\"fitbit token: \");\n        console.log(fitbit_access_token);\n        //window.location.hash = \"\"; triggers a re-render so useEffect is called again and we lose the access token\n        // putting the if checks if there even is a hash to read in the first place\n        //window.location.hash = \"\";\n        window.location = '/';\n      }\n    }\n    if (window.location.pathname === '/spotifylogin/') {\n      //window.location.hash = \"\";\n      let hash = window.location.hash;\n      let token = hash.split('=')[1].split('&')[0];\n      localStorage.setItem('spotify_access_token', token);\n      set_spotify_access_token(token);\n      console.log(\"spotify token: \");\n      console.log(spotify_access_token);\n      window.location = '/'; // can add a logged in successfully type of page at /spotifylogin/\n    }\n    console.log('final:');\n    console.log(localStorage.getItem('fitbit_access_token'));\n    console.log(localStorage.getItem('spotify_access_token'));\n  });\n  useEffect(() => {\n    if (fitbit_access_token !== \"empty\") {\n      // Perform actions using fitbit_access_token\n      console.log(\"Fitbit access token:\", fitbit_access_token);\n      // Make API calls or perform other actions with the access token\n    }\n  }, [fitbit_access_token]);\n  useEffect(() => {\n    if (spotify_access_token !== \"empty\") {\n      // Perform actions using spotify_access_token\n      console.log(\"Spotify access token:\", spotify_access_token);\n      // Make API calls or perform other actions with the access token\n    }\n  }, [spotify_access_token]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"S:\", localStorage.getItem('spotify_access_token'), localStorage.getItem('fitbit_access_token')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/spotifylogin\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 46\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/fitbitlogin\",\n        element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OW0XvYp3BnDxsTSyLTB02ZBqlj4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","Navbar","LoginPage","useState","useEffect","jsxDEV","_jsxDEV","App","_s","fitbit_access_token","set_fitbit_access_token","spotify_access_token","set_spotify_access_token","window","location","pathname","hash","token","split","localStorage","setItem","console","log","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/sidmarkurthi/Documents/fitbit_spotify/client/src/App.jsx"],"sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Routes, Route} from 'react-router-dom';\nimport Navbar from \"./components/Navbar.js\";\nimport LoginPage from './components/pages/LoginPage.js';\nimport { useState, useEffect } from 'react';\n\n\n\nfunction App() {\n  \n  const[fitbit_access_token, set_fitbit_access_token] = useState(\"empty\");\n  const[spotify_access_token, set_spotify_access_token] = useState(\"empty\");\n\n  // will need to add a dependency such that this is only triggered when spotify auth is initiated\n    // or else we'll mix up the fitbit and spotify authentication processes\n      // now we have a conditional that only triggers if we're at the spotify login\n  useEffect(() => {\n    // window.location.hash gives everything in the URL after the # (which is the access token in our case)\n    if(window.location.pathname === '/fitbitlogin') { \n      if (window.location.hash) {\n        let hash = window.location.hash;\n        let token = hash.split('=')[1].split('&')[0];\n        localStorage.setItem('fitbit_access_token', token);\n        set_fitbit_access_token(token);     \n        console.log(\"fitbit token: \");\n        console.log(fitbit_access_token);   \n      //window.location.hash = \"\"; triggers a re-render so useEffect is called again and we lose the access token\n        // putting the if checks if there even is a hash to read in the first place\n        //window.location.hash = \"\";\n        window.location = '/';\n      }\n    }\n    if(window.location.pathname === '/spotifylogin/') {\n      //window.location.hash = \"\";\n      let hash = window.location.hash;\n      let token = hash.split('=')[1].split('&')[0];\n      localStorage.setItem('spotify_access_token', token);\n      set_spotify_access_token(token);\n      console.log(\"spotify token: \");\n      console.log(spotify_access_token);\n      window.location = '/'; // can add a logged in successfully type of page at /spotifylogin/\n    }\n\n      console.log('final:')\n      console.log(localStorage.getItem('fitbit_access_token')); \n      console.log(localStorage.getItem('spotify_access_token'));  \n    \n  })\n\n  useEffect(() => {\n    if (fitbit_access_token !== \"empty\") {\n      // Perform actions using fitbit_access_token\n      console.log(\"Fitbit access token:\", fitbit_access_token);\n      // Make API calls or perform other actions with the access token\n    }\n  }, [fitbit_access_token]);\n\n  useEffect(() => {\n    if (spotify_access_token !== \"empty\") {\n      // Perform actions using spotify_access_token\n      console.log(\"Spotify access token:\", spotify_access_token);\n      // Make API calls or perform other actions with the access token\n    }\n  }, [spotify_access_token]);\n\n\n\n  return (\n    <Router>\n      {/* <h1>Hi</h1> */}\n      <Navbar />\n      <div>\n        S:\n        {localStorage.getItem('spotify_access_token')}\n        {localStorage.getItem('fitbit_access_token')}\n      </div>\n      {/* <Home /> */}\n      <Routes>\n        {/* can add paths to links if they're clicked and because routing is handled at the root, we do\n        don't need to do it anywhere else. we can route to elements w certain ids using to=\"#id\"\n        or we can go to a specific element using element={<element_name />} --> try using IDs for now, elements\n        seem pointless if we're gonna load them on the same page at a lower point. bring me to next idea:\n        how to load completely new page? --> can work on that after this tutorial*/}\n        <Route path='/' />\n        <Route path='/spotifylogin' element={<LoginPage />} />\n        <Route path='/fitbitlogin' element={<LoginPage />} />\n      </Routes>\n    </Router>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}