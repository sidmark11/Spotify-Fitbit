{"ast":null,"code":"var _jsxFileName = \"/Users/sidmarkurthi/Documents/fitbit_spotify/client/src/components/Navbar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// state: tells us what the variables are set to for a specific component\n// state is similar to session except state is local to each component whereas\n// session is user-specific and maintained acrosss the entire application\n// lastly, useState must be used inside of a component (function Navbar() creates a component)\nimport { Link } from 'react-router-dom';\n// Link replaces <a> tags in HTML and helps with navigating single page apps or navigating within a single page\nimport { Button } from './button.js';\n//importing css file automatically styles the elements specified in the css file\nimport './Navbar.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Navbar() {\n  _s();\n  // sets state for click variable so we track when buttons along the navbar have been clicked\n  const [click, setClick] = useState(false);\n  const [button, setButton] = useState(true);\n\n  // if the menu button is clicked then we toggle between true and false\n  const handleClick = () => setClick(!click);\n  // if an actual link on the menu is clicked then we always set to false\n  const closeMobileMenu = () => setClick(false);\n  // when click is false, the menu should be closed\n\n  //to change state of setButton when the window width is too small (less than 960px)\n  const showButton = () => {\n    if (window.innerWidth <= 960) {\n      setButton(false);\n    } else {\n      setButton(true);\n    }\n  };\n\n  //useEffect allows us to run side effects (additional logic) \n  //when certain dependencies (conditions) are met\n  //Ex: an empty array means only when a component is rendered (page is opened or refreshed or component is reloaded, etc)\n  //[click] would mean to run the logic when the value/state of click changes\n  //[ ,click] would mean any time we render or any time click changes \n  // and you can refer to the new state of click in the logic\n  //this means to run showButton() any time the page is opened up or refreshed\n  useEffect(() => {\n    showButton();\n  }, []);\n\n  //any time the window is resized, the showButton function is called\n  window.addEventListener('resize', showButton);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"https://kit.fontawesome.com/e0fe0a8b26.js\",\n      crossorigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: \"navbar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navbar-container\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          className: \"navbar-logo\",\n          onClick: closeMobileMenu,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faEnvelope\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"menu-icon\",\n          onClick: handleClick,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: click ? faTimes : faBars\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: click ? 'nav-menu active' : 'nav-menu',\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"nav-item\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/\",\n              className: \"nav-links\",\n              onClick: closeMobileMenu,\n              children: \"Home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), button && /*#__PURE__*/_jsxDEV(Button, {\n          route: \"/spotifylogin\",\n          buttonStyle: \"btn--outline\",\n          children: \"Spotify Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 22\n        }, this), button && /*#__PURE__*/_jsxDEV(Button, {\n          route: \"/fitbitlogin\",\n          buttonStyle: \"btn--outline\",\n          children: \"Spotify Log In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(Navbar, \"EqlzfYvNuhCpyFO/Zqcs1qcdUu4=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","Link","Button","FontAwesomeIcon","faEnvelope","faBars","faTimes","jsxDEV","_jsxDEV","Navbar","_s","click","setClick","button","setButton","handleClick","closeMobileMenu","showButton","window","innerWidth","addEventListener","children","src","crossorigin","fileName","_jsxFileName","lineNumber","columnNumber","className","to","onClick","icon","route","buttonStyle","_c","$RefreshReg$"],"sources":["/Users/sidmarkurthi/Documents/fitbit_spotify/client/src/components/Navbar.js"],"sourcesContent":["import React, {useState, useEffect} from 'react'\n// state: tells us what the variables are set to for a specific component\n  // state is similar to session except state is local to each component whereas\n  // session is user-specific and maintained acrosss the entire application\n  // lastly, useState must be used inside of a component (function Navbar() creates a component)\nimport { Link } from 'react-router-dom'\n// Link replaces <a> tags in HTML and helps with navigating single page apps or navigating within a single page\nimport { Button } from './button.js'\n//importing css file automatically styles the elements specified in the css file\nimport './Navbar.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons'\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\n\n\n\nfunction Navbar() {\n  // sets state for click variable so we track when buttons along the navbar have been clicked\n  const [click, setClick] = useState(false);\n  const [button, setButton] = useState(true);\n\n  // if the menu button is clicked then we toggle between true and false\n  const handleClick = () => setClick(!click);\n  // if an actual link on the menu is clicked then we always set to false\n  const closeMobileMenu = () => setClick(false);\n  // when click is false, the menu should be closed\n\n  //to change state of setButton when the window width is too small (less than 960px)\n  const showButton = () => {\n    if(window.innerWidth <= 960) {\n      setButton(false)\n    } else {\n      setButton(true)\n    }\n  }\n\n  //useEffect allows us to run side effects (additional logic) \n    //when certain dependencies (conditions) are met\n    //Ex: an empty array means only when a component is rendered (page is opened or refreshed or component is reloaded, etc)\n      //[click] would mean to run the logic when the value/state of click changes\n      //[ ,click] would mean any time we render or any time click changes \n      // and you can refer to the new state of click in the logic\n  //this means to run showButton() any time the page is opened up or refreshed\n  useEffect(() => {\n    showButton()\n  }, [])\n\n  //any time the window is resized, the showButton function is called\n  window.addEventListener('resize', showButton);\n\n  return (\n    <div>\n      {/* fontawesome key to access different icons and fonts */}\n      <script src=\"https://kit.fontawesome.com/e0fe0a8b26.js\" crossorigin=\"anonymous\"></script>\n      {/* creatign navbar at top */}\n      <nav className=\"navbar\"> \n        <div className=\"navbar-container\">\n          <Link to='/' className='navbar-logo' onClick={closeMobileMenu}>\n            <FontAwesomeIcon icon={faEnvelope} />\n          </Link>\n          {/* if the bars are clicked, then click is toggled,\n            we can only have the bars display at <= 960px due to smth we put in css (media query)  */}\n          <div className=\"menu-icon\" onClick={handleClick}>\n            <FontAwesomeIcon icon={click ? faTimes : faBars} />\n          </div>\n          {/* ul is unordered list where it has li (list elements) in side of it\n            and these are displayed in the order they're listed in. each ul here contains a link to a \n            specific part of the page*/}\n          {/* if a button on the menu was clicked, then the menu should be on screen, else it should be closed */}\n          <ul className={click ? 'nav-menu active' : 'nav-menu'}>\n            <li className='nav-item'>\n              <Link to='/' className='nav-links' onClick={closeMobileMenu}>\n                Home\n              </Link>\n            </li>\n            {/* <li className='nav-item'>\n              <Link to='/' className='nav-links-mobile' onClick={closeMobileMenu}>\n                Sign Up\n              </Link>\n            </li> */}\n            <li>\n              \n            </li>\n          </ul>\n          {button && <Button route='/spotifylogin' buttonStyle='btn--outline'>Spotify Log In</Button>}\n          {button && <Button route='/fitbitlogin' buttonStyle='btn--outline'>Spotify Log In</Button>}\n          {/* if button var is true, then we show the button on screen, else don't show */}\n        </div>\n      </nav>\n    </div>\n  )\n}\n\nexport default Navbar\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}