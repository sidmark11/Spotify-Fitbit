{"ast":null,"code":"var _jsxFileName = \"/Users/sidmarkurthi/Documents/spotify_fitbit_project/client/src/components/button.js\";\nimport React from 'react';\nimport './button.css';\nimport { Link } from 'react-router-dom';\n\n//creating an array of button styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STYLES = ['btn--primary', 'btn--outline'];\nconst SIZES = ['btn--medium', 'btn--large'];\n\n//when using export const and explicitly defining, we can have multiple exports in the same file/module\n//then we can import like this: import { Button, other } from './button.js'; \n\n//children is a special prop in react, so, when we import it, we don't need to specify what the children are\n//eg, we don't need to say children='' because react knows what the children property is\n//for non-special (such as buttonStyle, type, and onClick), we need to specify them\nexport const Button = ({\n  children,\n  type,\n  onClick,\n  buttonStyle,\n  buttonSize\n}) => {\n  // if the styles array has the buttonStyle argument, the checkButtonStyle = the arg, else it equals the default first val\n  const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\n  const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n  //puts a button over the link to the sign-up page\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: \"/sign-up\",\n    className: \"btn-mobile\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      //`` allows us to put in template literals (${checkButtonSize}) whereas '' doesn't\n      className: `btn ${checkButtonStyle} ${checkButtonSize}` // how does adding template literals give the right classname for styling?\n      ,\n      onClick: onClick,\n      type: type,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_c = Button;\nvar _c;\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"names":["React","Link","jsxDEV","_jsxDEV","STYLES","SIZES","Button","children","type","onClick","buttonStyle","buttonSize","checkButtonStyle","includes","checkButtonSize","to","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sidmarkurthi/Documents/spotify_fitbit_project/client/src/components/button.js"],"sourcesContent":["import React from 'react'\nimport './button.css'\nimport { Link } from 'react-router-dom'\n\n//creating an array of button styles\nconst STYLES = ['btn--primary', 'btn--outline'];\n\nconst SIZES = ['btn--medium', 'btn--large'];\n\n//when using export const and explicitly defining, we can have multiple exports in the same file/module\n//then we can import like this: import { Button, other } from './button.js'; \n\n//children is a special prop in react, so, when we import it, we don't need to specify what the children are\n    //eg, we don't need to say children='' because react knows what the children property is\n    //for non-special (such as buttonStyle, type, and onClick), we need to specify them\nexport const Button = ({\n    children, \n    type, \n    onClick, \n    buttonStyle, \n    buttonSize}) => {\n    // if the styles array has the buttonStyle argument, the checkButtonStyle = the arg, else it equals the default first val\n    const checkButtonStyle = STYLES.includes(buttonStyle) ? buttonStyle : STYLES[0];\n    const checkButtonSize = SIZES.includes(buttonSize) ? buttonSize : SIZES[0];\n\n    //puts a button over the link to the sign-up page\n    return (\n        <Link to='/sign-up' className='btn-mobile'>\n            <button\n            //`` allows us to put in template literals (${checkButtonSize}) whereas '' doesn't\n            className={`btn ${checkButtonStyle} ${checkButtonSize}`} // how does adding template literals give the right classname for styling?\n            onClick={onClick}\n            type={type}>\n                {children}\n            </button>\n        </Link>\n    )\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AACrB,SAASC,IAAI,QAAQ,kBAAkB;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAG,CAAC,cAAc,EAAE,cAAc,CAAC;AAE/C,MAAMC,KAAK,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC;;AAE3C;AACA;;AAEA;AACI;AACA;AACJ,OAAO,MAAMC,MAAM,GAAGA,CAAC;EACnBC,QAAQ;EACRC,IAAI;EACJC,OAAO;EACPC,WAAW;EACXC;AAAU,CAAC,KAAK;EAChB;EACA,MAAMC,gBAAgB,GAAGR,MAAM,CAACS,QAAQ,CAACH,WAAW,CAAC,GAAGA,WAAW,GAAGN,MAAM,CAAC,CAAC,CAAC;EAC/E,MAAMU,eAAe,GAAGT,KAAK,CAACQ,QAAQ,CAACF,UAAU,CAAC,GAAGA,UAAU,GAAGN,KAAK,CAAC,CAAC,CAAC;;EAE1E;EACA,oBACIF,OAAA,CAACF,IAAI;IAACc,EAAE,EAAC,UAAU;IAACC,SAAS,EAAC,YAAY;IAAAT,QAAA,eACtCJ,OAAA;MACA;MACAa,SAAS,EAAG,OAAMJ,gBAAiB,IAAGE,eAAgB,EAAE,CAAC;MAAA;MACzDL,OAAO,EAAEA,OAAQ;MACjBD,IAAI,EAAEA,IAAK;MAAAD,QAAA,EACNA;IAAQ;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEf,CAAC;AAACC,EAAA,GAtBWf,MAAM;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}